gpuDevice(1);
imds = imageDatastore('align', ...
    'IncludeSubfolders',true,...
    'LabelSource','foldernames');

imds.ReadSize = 128;
imds = shuffle(imds);
[imdsTrain,imdsVal,imdsTest] = splitEachLabel(imds,0.95,0.025);
dsTrainNoisy = transform(imdsTrain,@downsample);
dsValNoisy = transform(imdsVal,@downsample);
dsTestNoisy = transform(imdsTest,@downsample);
dsTrain = combine(dsTrainNoisy,imdsTrain);
dsVal = combine(dsValNoisy,imdsVal);
dsTest = combine(dsTestNoisy,imdsTest);
dsTrain = transform(dsTrain,@commonPreprocessing);
dsVal = transform(dsVal,@commonPreprocessing);
dsTest = transform(dsTest,@commonPreprocessing);

exampleData = preview(dsTrain);
inputs = exampleData(:,1);
responses = exampleData(:,2);
minibatch = cat(2,inputs,responses);
montage(minibatch','Size',[8 2])
title('Inputs (Left) and Responses (Right)')

options = trainingOptions('adam', ...
    'MaxEpochs',500,...
    'MiniBatchSize',48, ...
    'VerboseFrequency',200, ...
    'InitialLearnRate',1e-4, ...
    'Shuffle','every-epoch', ...
    'Plots','training-progress', ...
    'LearnRateSchedule' , 'piecewise', ...
    'LearnRateDropPeriod', 20, ...
    'LearnRateDropFactor', 0.9, ...
    'ValidationData', dsVal, ...
    'ValidationFrequency', 200, ...
    'CheckpointPath', 'E:\temp_net', ...
    'ExecutionEnvironment','gpu');

net = trainNetwork(dsTrain,lgraph_1,options);

ypred = predict(net,dsTest);
inputImageExamples = preview(dsTest);
ref = inputImageExamples{1,2};
originalNoisyImage = inputImageExamples{1,1};
montage({ref, inputImageExamples{1},ypred(:,:,:,1)});
